/* COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/

/* reset to have same appearance on every browser */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* padding + borders are NO longer added to box width and hight */
}

/* overall font properties in body element to allow use of inheritance */
body {
  font-family: Lato, sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px; /* space arround entire webpage */
}

.header {
  position: relative;
  height: 95vh;
  /* use comma to define 2 bgs one on top of the other (gradient on top of bg img) 
  gradient colors use opacity, so that img is visible */
  background-image: linear-gradient(
      to right bottom,
      rgba(128, 214, 113, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover; /* whatever width of viewport, img will fit always fit element */
  background-position: top;
  /* define polygone coordinates in which element is still visible;
  coordinates goes clockwise from top left (-> x = 0, y = 0) corner on */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  /* position starts at top left corner of first PARENT element that can find with position: relative */
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

/* center content */
.text-box {
  position: absolute;
  top: 40%; /* means that element starts exactly at this point */
  left: 50%;
  /* to center exactly in middle, have to use translate(x, y); 
  that refers to element itself: -50% means half of element width OR height to left OR top*/
  transform: translate(-50%, -50%);
  text-align: center; /* centers all inline elements (e.g. text, but also <a>) */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* to prevent litte strange move of this box element when animations inside are finished  */
  backface-visibility: hidden;
  margin-bottom: 60px;
}

/* define as block elements occupy whole line and create line breaks before and after them  */
.heading-primary-main {
  font-size: 60px;
  font-weight: 400;
  display: block;
  letter-spacing: 35px;
  /* animation-timing-functions https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function */
  /* animation shorthand: order is important */
  animation: 1s ease-out moveInLeft /*3s 3*/;
  /* animation-iteration-count: 3;  */
  /* animation-delay: 3s; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: 1s ease-out moveInRight;
}

/* 
2 types of animation: a) transition property when hovering is defined, b) @keyframes;
for browser performance: best is to animate only 2 props
*/

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  80% {
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* 
a pseudo-class allows to select something that cannot be expressed by a simple selector;
examples: :link, :visited, :hover, :focus, :active are  -> to define in this order;
define 1 generic btn class and add specific properties with specific classes
*/
.btn:link,
.btn:visited {
  /* by default <a> is inline element, define it as inline-block that you can set width, height, padding */
  display: inline-block;
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  border-radius: 100px;
  transition: all 0.2s; /* transition prop has to be defined on initial state where a change will start */
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  /* box shadow: offset x axis, offset y axis, blur, color of shadow */
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* gives impression of real clicking */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* a pseudo-element allows to create items that do not normally exist in document tree, for example ::after */
.btn::after {
  /* content + display needed to make appear pseudo-element on screen */
  content: '';
  display: inline-block;
  /* pseudo-element is treated like child of .btn - so 100% refers to dimensions of .btn */
  height: 100%;
  width: 100%;
  border-radius: 100px;
  /* put pseudo-element behind current btn */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

/* when btn is hovered following pseudo-element appears */
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; /* appears like effect of fading out */
}

.btn-animated {
  animation: 0.5s ease-out 0.75s moveInBottom;
  /* "backwards": styles of first animation step (-> 0%) will be applied before animation starts; 
  "forwards": end step styles will remain */
  animation-fill-mode: backwards;
}
