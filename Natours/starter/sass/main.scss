$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

// reset to have same appearance on every browser, also add all pseudo-elements
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; // box-sizing is not inherited by default, but I can set inheritance for every element on page
}

html {
  // define root font-size: often used workaround for better rem calcs, set it to 10px
  font-size: 62.5%; // correspond to 10px (% based on default root font size 16px) but user can set his desired root font size in browser settings
}

// overall font properties in body element to allow use of inheritance
body {
  font-family: Lato, sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem; // space arround entire webpage
  box-sizing: border-box; // padding + borders are NO longer added to box width and hight
}

.header {
  position: relative;
  height: 95vh;
  // use comma to define 2 bgs one on top of the other (gradient on top of bg img)
  // gradient colors use opacity, so that img is visible
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover; // whatever width of viewport, img will fit always fit element
  background-position: top;
  // define polygone coordinates in which element is still visible;
  // coordinates goes clockwise from top left (-> x = 0, y = 0) corner on
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  // &__... means .header__logo-box -> so you can use nesting placeholder "&" for BEM pattern
  &__logo-box {
    position: absolute;
    // position starts at top left corner of first PARENT element that can find with position: relative
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  // center content
  &__text-box {
    position: absolute;
    top: 40%; // means that element starts exactly at this point
    left: 50%;
    // to center exactly in middle, have to use translate(x, y);
    // that refers to element itself: -50% means half of element width OR height to left OR top*/
    transform: translate(-50%, -50%);
    text-align: center; // centers all inline elements (e.g. text, but also <a>)
  }
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  // to prevent litte strange move of this box element when animations inside are finished
  backface-visibility: hidden;
  margin-bottom: 6rem;

  // define as block elements that occupy whole line and create line breaks before and after them
  &--main {
    font-size: 6rem;
    font-weight: 400;
    display: block;
    letter-spacing: 3.5rem;
    // animation-timing-functions https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function
    // animation shorthand: order is important
    animation: 1s ease-out moveInLeft; //3s 3*/;
    // animation-iteration-count: 3;
    // animation-delay: 3s;
  }

  &--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: 1s ease-out moveInRight;
  }
}

// 2 types of animation: a) transition property when hovering is defined, b) @keyframes;
// for browser performance: best is to animate only 2 props
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  80% {
    transform: translateY(-1rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.btn {
  // a pseudo-class allows to select something that cannot be expressed by a simple selector;
  // examples: :link, :visited, :hover, :focus, :active are  -> to define in this order;
  // define 1 generic btn class and add specific properties with specific classes
  &:link,
  &:visited {
    // by default <a> is inline element, define it as inline-block that you can set width, height, padding
    display: inline-block;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    transition: all 0.2s; // transition prop has to be defined on initial state where a change will start
    position: relative;
    font-size: 1.6rem;
  }

  &:hover {
    transform: translateY(-3px);
    // box shadow: offset x axis, offset y axis, blur, color of shadow
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    // when btn is hovered following pseudo-element appears
    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; // appears like effect of fading out
    }
  }

  // gives impression of real clicking
  &:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    &::after {
      background-color: $color-white;
    }
  }

  // a pseudo-element allows to create items that do not normally exist in document tree, for example ::after
  &::after {
    // content + display needed to make appear pseudo-element on screen
    content: '';
    display: inline-block;
    // pseudo-element is treated like child of .btn - so 100% refers to dimensions of .btn
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    // put pseudo-element behind current btn
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
  }

  &--animated {
    animation: 0.5s ease-out 0.75s moveInBottom;
    // "backwards": styles of first animation step (-> 0%) will be applied before animation starts;
    // "forwards": end step styles will remain
    animation-fill-mode: backwards;
  }
}
